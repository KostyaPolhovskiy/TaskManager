[{"Title":"JWT","Deadline":"","CreatedDate":"2019-04-15T11:58:22.797Z","Description":"Добавить к приложению из лабораторной №2 аутентификацию на базе JWT токенов. Токен должен передаваться через httponly cookie на клиент и так же отправляться на сервер. При попытке прочитать/изменить данные на сервере без валидного токена, клиенту должен возвращаться 401 код. При получении кода 401 клиент должен потребовать от пользователя ввода логина/пароля. Для формирования jwt токена можно использовать только пакеты jsonwebtoken и bcrypt. Логику аутентификации нужно описать в виде отдельного middleware той библиотеки, на которой написан сервер (например, Express).","Files":"","Color":"blue","TaskStatus":"Started","TaskId":"i1555329502797"},{"Title":"Rest API + SPA","Deadline":"2019-04-11","CreatedDate":"2019-04-15T11:57:54.081Z","Description":"Простое приложение, как в лабораторной работе 1, но с другой архитектурой. На сервере должен быть реализован REST API, на клиенте - Single Page Application. Обмен данных должен осуществляться путем отправки/принятия http запросов с данными в формате JSON или файлов в формате multipart/form-data. Обновление данных на клиенте не должно приводить к перегрузке страницы. Серверный REST API должен поддерживать ожидаемую семантику: правильно использовать http методы (GET для чтения данных, POST/PUT для изменения, DELETE для удаления и т.п.) и возвращать правильные коды ответов (200 в случае успешного чтения/изменения данных, 404 если ресурс не найдет и т.п.). Обязательно использование NodeJS на сервере. На клиенте можно использовать что угодно, React/Angular/Vue или вообще без библиотеки.","Files":"","Color":"yellow","TaskStatus":"Completed","TaskId":"i1555329474081"},{"Title":"Клиент - сервер","Deadline":"2019-03-29","CreatedDate":"2019-04-15T11:57:26.256Z","Description":"Разработать простое приложения с рендерингом на сервере. Например, список задач со статусом их выполнения, фильтрацией по статусу и выставлением ожидаемой даты завершения, а так же возможностью прикреплять файлы к каждой задаче. Сервер должен отдавать клиенту готовую разметку, отправка данных серверу должна осуществляться через отправку форм. Обязательно использование NodeJS, конкретные библиотеки могут отличаться. Например, подойдут Express + EJS.","Files":"","Color":"green","TaskStatus":"Completed","TaskId":"i1555329446256"}]